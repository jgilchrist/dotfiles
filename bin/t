#!/usr/bin/env zsh

set -euo pipefail

main() {
    # If provided with args, pass them through.
    if [[ -n "$@" ]]; then
        tmux "$@"
        return
    fi

    local search_path="$(pwd)"
    while [[ "$search_path" != / ]];
    do
        if [ -x "${search_path}/.tmux" ]; then
            local tmux_file_dir="${search_path}"
            break
        fi

        search_path="$(readlink -f "$search_path"/..)"
    done

    if [ -z ${tmux_file_dir+x} ]; then
        local selected_dir="$(cat ~/.local/tmux-projects | fzf)"
        if [ -x "${selected_dir}/.tmux" ]; then
            local tmux_file_dir="${selected_dir}"
        else
          echo "No .tmux file selected"
          return
        fi
    fi

    local tmux_file="${tmux_file_dir}/.tmux"
    echo "Using .tmux file from ${tmux_file_dir}"
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(md5sum ${tmux_file})"
    if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
        if (( $+commands[bat] )); then
            bat "${tmux_file}"
        else
            cat "${tmux_file}"
        fi
        read -k 1 -r 'REPLY?Trust (and run) this .tmux file? (y = trust, otherwise = skip) '
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "$DIGEST" >> ~/..tmux.digests
            (cd "${tmux_file_dir}" && "${tmux_file}")
            return
        else
            echo "Skipping."
        fi
    else
        (cd "${tmux_file_dir}" && "${tmux_file}")
        return
    fi
}

main "$@"
