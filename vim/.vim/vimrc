" Leader key as ,
let mapleader=","
let maplocalleader=","

" Plugins {{{

function! s:SourceFromDir(directory)
    let directory_wildcard = '~/.vim/' . a:directory . '/*'

    for config_file in split(glob(directory_wildcard), '\n')
        if filereadable(config_file)
            execute 'source' config_file
        endif
    endfor
endfunction

function! s:InstallVimPlug()
    if empty(glob("~/.vim/autoload/plug.vim"))
        call system('mkdir -p ~/.vim/autoload')
        call system('curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim')
    endif
endfunction
call s:InstallVimPlug()

set runtimepath+=~/.vim/lang

call plug#begin("~/.vim/bundle")

call s:SourceFromDir('plugins')
call s:SourceFromDir('plugins/incubating')

" My plugins
let g:plug_url_format = 'git@github.com:%s.git'
call s:SourceFromDir('plugins/jgilchrist')
unlet! g:plug_url_format

call plug#end()

" }}}

" Settings {{{

filetype plugin indent on

set encoding=utf-8

" Don't show the intro message when starting Vim
set shortmess=I

" Appearance
syntax on
colorscheme atom-dark-256

set hidden

set number
set ruler
set showcmd
set cursorline
set nowrap
set laststatus=2
set scrolloff=3
set colorcolumn=101
set synmaxcol=800 " Don't attempt to highlight lines longer than 800 chars
set listchars=tab:▸\ ,eol:¬,trail:·

set wildmenu
set wildmode=list:longest,full

" Indentation
set autoindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set backspace=indent,eol,start

" Search
set incsearch
set hlsearch
set ignorecase smartcase

" Redrawing
set lazyredraw
set ttyfast

" Automatically read the file if it changed outside vim
set autoread
set modeline

" Open splits to the right and to the bottom
set splitbelow
set splitright

" Resize splits when vim itself is resized
augroup ResizeSplits
    au!
    au VimResized * :wincmd =
augroup END

" Flash matching braces for 200ms
set showmatch
set matchtime=2

" Don't keep swap files or backups
set noswapfile
set nobackup

" Don't search through includes for completion as this can be slow
set complete-=i

" When joining lines, delete comment characters if appropriate
set formatoptions+=j

" }}}

" Mappings {{{

" Sanity {{{
" These mappings improve consistency in Vim's commands

" Saner line handling
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" :W and :Q still work
command! W write
command! Q quit

" Delete and paste without overwriting the paste register
nnoremap x "_x
vnoremap p "_c<Esc>p

" Make Y behave like other capitals
nnoremap Y y$

" When joining lines, keep the cursor in place
nnoremap J mzJ`z

" }}}

" Edit/source configuration
nnoremap <leader>ec :vsplit $MYVIMRC<cr>
nnoremap <leader>sc :source $MYVIMRC<cr>

" Disable the arrow keys
nnoremap <Up> <nop>
nnoremap <Down> <nop>
nnoremap <Left> <nop>
nnoremap <Right> <nop>

" Remap H and L to start and end of the line
noremap H ^
noremap L $

" Easy split navigation
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" <leader> shortcuts for copying/pasting to/from system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p

" Shift-Q repeats the q macro
nnoremap Q @q

" Close the current buffer with <leader>q
nnoremap <silent> <leader>q :bd<CR>

" Hide search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" Settings toggles
nnoremap <leader>sw :set wrap!<CR>:set wrap?<CR>
nnoremap <leader>sl :set list!<CR>:set list?<CR>

" Surround with 's'
nmap s ys
vmap s S

" Add an arrow -> with <leader>a
inoremap <leader>a ->

" }}}

" GUI {{{

if has('gui_running')
    if has('mac')
        set guifont=Monaco:h11
    else
        set guifont=Inconsolata\ 12
    endif

    " Remove scrollbars and menus from the GUI
    set guioptions=c

    color atom-dark
endif

" }}}

" vim: set fdm=marker:
